<!DOCTYPE html>
<html lang="en">
<head>
  <title>Reports Creator Tool</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
.chartviewer_canvas {
  margin-left: auto;
  margin-right: auto;
  min-height: 150px;
}
</style>
</head>
<body>
<div class="container p-3">
    <h5>Create Dynamic Report <a class="text-decoration-none text-dark" href="#" data-toggle="popover" data-placement="bottom" title="What this tool do?" data-content="You can use this admin tool to create dynamic secure custom reports/charts and display this reports/charts to the users, by using this tool you are sure 100% no secuirty issues while create the reports becuase users idintifed automatic and the tool guide you to make valid quires that not effect secuirties">
            <i class="fa fa-question-circle"></i>
        </a>
    </h5>
    <div id="stages" class="container container border shadow p-3">
        <div class="container stages" id="chart_selection">
            <h5>
                <span class="badge badge-primary">1</span> Select Chart Type:
            </h5>
            <div class="form-group">
                <div class="form-row">
                    <div class="col-5">
                        <label for="chart_type">Chart Type:</label>
                    </div>
                    <div class="col-7">
                        <select class="form-control" id="chart_type" name="chart_type">
                            <option value="">Select Chart Type</option>
                            <option value="bar">Bar</option>
                            <option value="doughnut">Doughnut</option>
                            <option value="pie">Pie</option>
                            <option value="line">Line</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="form-row">
                    <div class="col-5">
                        <label for="data_count">Data count <a class="text-decoration-none text-dark" href="#" data-toggle="popover" data-placement="bottom" title="What is Data Count?" data-content="How many columns of data are in the graph for example if you have a bar chart and you enter 5 the resulting bar chart will have 5 bars you can always go back and change the number from here">
                                <label class="fa fa-question-circle"></label>
                            </a>: </label>
                    </div>
                    <div class="col-7">
                        <input type="number" class="form-control" name="data_count" id="data_count" min="1" max="20" title="min is 1 and max size is 20" step="1" />
                    </div>
                </div>
            </div>
            <!-- view chart -->
            <div class="shadow mt-3 mb-3">
                <canvas id="chart_viewer" class="chartviewer_canvas"></canvas>
            </div>
            <div class="d-flex justify-content-center align-items-center mt-2">
                <button type="button" class="btn btn-primary btn-sm" onclick="goToStage('chart_selection', 'chart_queries')" id="level1_next">Next</button>
            </div>
        </div>
        <div class="container stages" style="display:none;" id="chart_queries">
            <h5>
                <span class="badge badge-primary">2</span> Create Dynamic Data Queries:
            </h5>
            <div class="d-flex justify-content-center align-items-center mt-2">
                <button type="button" class="btn btn-danger btn-sm" onclick="goToStage('chart_queries', 'chart_selection')">Back</button>
                <button type="button" class="btn btn-primary btn-sm ml-1" onclick="goToStage('chart_queries', 'chart_mapping')">Next</button>
            </div>
        </div>
        <div class="container stages" style="display:none;" id="chart_mapping">
            <h5>
                <span class="badge badge-primary">3</span> Map Data to Selected chart:
            </h5>
            <div class="d-flex justify-content-center align-items-center">
                <button type="button" class="btn btn-danger btn-sm" onclick="goToStage('chart_mapping', 'chart_queries')">Back</button>
                <button type="submit" class="btn btn-success btn-sm ml-1" id="report_create" style="display:none;">Create</button>
            </div>
        </div>
    </div>
</div>

<script>

  /* global system chart object that will create the full chart js/flask and process it's data with ajax */
  
  const currentChart = {
    type: '',
    dataCount: 0,
    initialized: false,
    data: [],
    values: [],
    colors: [],
    labels: [],
    mapped: false,
    clearChartData: ()=>{
      currentChart.values = [];
      currentChart.colors = [];
      currentChart.labels = [];
    },
    colorExist: (color)=>{
      let currentColors = [];
      currentChart.data.forEach((datObj)=>{
        if (datObj.color){
          currentColors.push(datObj.color);
        } else {
          console.log('colorExist found object without color prop');
        }      
      });
      return currentColors.includes(color);
    },
    selectRandomColor: ()=>{
      const hexaA = ['a', '1','f', '2','3','b', '4','5','6','e','7','8','9', 'c', 'd'];
      color = '#';
      while(color == '#' || currentChart.colorExist(color)){
       color = '#';
       for (let c=0; c<6; c++){
          
          color += hexaA[Math.floor(Math.random()*hexaA.length)];
       }
      }
      console.log(color);
      return color;
    },
    setType: ()=>{    
      if ($("#chart_type").length){        
        currentChart.type = $("#chart_type").val();
        return true;
      }
    },
    setDataCount: ()=>{
      if ($("#data_count").length && !isNaN(parseInt($("#data_count").val()))){
          /* this clear old data */
          const newCount = parseInt($("#data_count").val());
          currentChart.dataCount = newCount;
          currentChart.initializeData();
          return true;
      }
    },
    initializeData: ()=>{
      /*this clear old data, count may increse or decrese by one using button in level 2, but incase change count reintilaze data*/
      currentChart.data = [];
      for (let i=0; i<currentChart.dataCount; i++){
         const newDataCol = 1;
         const newRandomColor = currentChart.selectRandomColor();
         currentChart.data.push({
           value: newDataCol,
           color: newRandomColor,
           label: '',
         });
      }
      currentChart.setChartData();      
      currentChart.initialized = true;
      /* redisplay the chart when count set */
      displayChart();
      console.log(currentChart);
      return true;
    },
    setChartData: ()=>{
       /*this generate ordered arrays from data object */
       currentChart.clearChartData();
       currentChart.data.forEach( (dataRow)=>{
           currentChart.values.push(dataRow.value);
           currentChart.colors.push(dataRow.color);
           currentChart.labels.push(dataRow.label);  
       });
    }
  };

  //currentChart.selectRandomColor();
  let viewerChart = null;
  const allowedCharts = ['bar','doughnut','pie','line'];
  
  /* clear old example chart */
  function destoryChart (){
    if (viewerChart){
      viewerChart.destroy();
      viewerChart = null;
      return true;
    }
  }
  
  
  function displayChart () {
  
    destoryChart();
    if ($("#chart_type").val() && allowedCharts.includes($("#chart_type").val())){         

          $("#level1_next").hide();
          const displayNextCB = function(){          
             /* display next button after chart rendered that make sure wait chart created before create new one, or before destory it in after level 1 */
             $("#level1_next").show('fast');
          }

          if (currentChart.initialized){

            viewerChart = createChart($("#chart_type").val(), 'chart_viewer', currentChart.values, currentChart.labels,currentChart.colors, displayNextCB);
            
          } else {
            viewerChart = createChart($("#chart_type").val(), 'chart_viewer', [12, 19, 3, 5, 2, 3], ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],null, displayNextCB);
            
          }

    }
  };
  
  
  /* actions made when enter stage 1  */
  function onEnterStage1(){
    destoryChart();
    
    if ($("#chart_type").length && $("#data_count").length && $("#level1_next").length){
      displayChart();      
    } else {
      console.log("Unable to start onEnterStage1 function missing elements.");
      return false;
    }
    
    
    //createChart('pie');
    console.log("before level 1 (onLeave()");
  }
  
 
    
  const beforeStagesActions = (targetStageId)=>{
    switch(targetStageId){
      case 'chart_selection':
      /*level 1*/
      onEnterStage1();
      break;
      case 'chart_queries':
      /*level 2*/
      console.log("before level 2 (onLeave()");
      break;
      case 'chart_mapping':
      console.log("before level 3 (onLeave()");
      /*level 3*/
      break;      
    }
  }
  const afterStagesActions = (currentStageId)=>{
    switch(currentStageId){
      case 'chart_selection':
      /*level 1*/
      break;
      case 'chart_queries':
      /*level 2*/
      console.log("after leaving level 2 (onEnter)");
      break;
      case 'chart_mapping':
      /*level 3*/
      console.log("after leaving level 3 (onEnter)");
      break;      
    }
  };
  
  function goToStage(currentStageId, targetStageId){
    if (currentStageId && targetStageId && $(`#${targetStageId}`).length){
      $('.stages').hide();
      $(`#${targetStageId}`).show('mid', 'swing', ()=>{
         afterStagesActions(currentStageId);
         beforeStagesActions(targetStageId);
      });
      

      
    }
  }
  
  $(document).ready(function(){
    $('[data-toggle="popover"]').popover();   
  });
  
  function createChart(type='bar', canvasId='', values=[], labels=[], backgroundColors=null,cb=null){

    const ctx = document.getElementById(canvasId);
    return new Chart(ctx, {
      type: type,
      data: {
        labels: labels,
        datasets: [{
          label: '# of Votes',
          data: values,
          borderWidth: 1,
          backgroundColor: backgroundColors,
          borderColor: 'rgb(75, 192, 192)',
          
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        },
        animation: {
          onComplete: function(){
            if (typeof(cb) == 'function'){
              cb();
            }
          }        
        }
      },

    });
  }
  
  if ($("#chart_type").length){
    $("#chart_type").on("change", displayChart);
    $("#chart_type").on("change", currentChart.setType);
  }
  if ($("#data_count").length){
    $("#data_count").on("change", currentChart.setDataCount);
  }
  
  //console.log(createChart('pie').destroy());
</script>

</body>
</html>
